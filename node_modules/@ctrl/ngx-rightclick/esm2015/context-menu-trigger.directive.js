/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input, Output, EventEmitter, } from '@angular/core';
import { ContextMenuService } from './context-menu.service';
export class ContextMenuTriggerDirective {
    /**
     * @param {?} contextMenuService
     */
    constructor(contextMenuService) {
        this.contextMenuService = contextMenuService;
        this.holdToDisplay = 1000;
        this.menuAction = new EventEmitter();
        this.menuClose = new EventEmitter();
        this.visible = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleMenu($event) {
        $event.preventDefault();
        this.menu = this.contextMenuService.show($event, this.contextMenuTrigger, this.menuContext, this.menuClose, this.menuAction);
        this.visible = true;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleMouseDown($event) {
        if (this.holdToDisplay >= 0) {
            $event.stopPropagation();
            $event.clientY = $event.touches[0].clientY;
            $event.clientX = $event.touches[0].clientX;
            this.mouseDownTimeoutId = setTimeout(() => this.handleMenu($event), this.holdToDisplay);
        }
    }
    /**
     * @return {?}
     */
    handleMouseUp() {
        clearTimeout(this.mouseDownTimeoutId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.sub = this.menuClose.subscribe(() => this.visible = false);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.sub.unsubscribe();
    }
}
ContextMenuTriggerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[contextMenuTrigger]',
                exportAs: 'contextMenuTrigger',
            },] }
];
/** @nocollapse */
ContextMenuTriggerDirective.ctorParameters = () => [
    { type: ContextMenuService }
];
ContextMenuTriggerDirective.propDecorators = {
    contextMenuTrigger: [{ type: Input }],
    menuContext: [{ type: Input }],
    holdToDisplay: [{ type: Input }],
    menuAction: [{ type: Output }],
    menuClose: [{ type: Output }],
    handleMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }],
    handleMouseDown: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
    handleMouseUp: [{ type: HostListener, args: ['touchend',] }]
};
if (false) {
    /** @type {?} */
    ContextMenuTriggerDirective.prototype.contextMenuTrigger;
    /** @type {?} */
    ContextMenuTriggerDirective.prototype.menuContext;
    /** @type {?} */
    ContextMenuTriggerDirective.prototype.holdToDisplay;
    /** @type {?} */
    ContextMenuTriggerDirective.prototype.menuAction;
    /** @type {?} */
    ContextMenuTriggerDirective.prototype.menuClose;
    /** @type {?} */
    ContextMenuTriggerDirective.prototype.menu;
    /** @type {?} */
    ContextMenuTriggerDirective.prototype.visible;
    /** @type {?} */
    ContextMenuTriggerDirective.prototype.mouseDownTimeoutId;
    /** @type {?} */
    ContextMenuTriggerDirective.prototype.sub;
    /** @type {?} */
    ContextMenuTriggerDirective.prototype.contextMenuService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1tZW51LXRyaWdnZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGN0cmwvbmd4LXJpZ2h0Y2xpY2svIiwic291cmNlcyI6WyJjb250ZXh0LW1lbnUtdHJpZ2dlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxHQUdiLE1BQU0sZUFBZSxDQUFDO0FBSXZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBcUIsTUFBTSx3QkFBd0IsQ0FBQztBQU0vRSxNQUFNOzs7O0lBMkNKLFlBQW9CLGtCQUFzQztRQUF0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9COzZCQXhDakMsSUFBSTswQkFDTixJQUFJLFlBQVksRUFBTzt5QkFDeEIsSUFBSSxZQUFZLEVBQVE7dUJBRXBDLEtBQUs7S0FvQytDOzs7OztJQS9COUQsVUFBVSxDQUFDLE1BQWtCO1FBQzNCLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQ3RDLE1BQU0sRUFDTixJQUFJLENBQUMsa0JBQWtCLEVBQ3ZCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FDaEIsQ0FBQztRQUNGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0tBQ3JCOzs7OztJQUdELGVBQWUsQ0FBQyxNQUFXO1FBQ3pCLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUU7WUFDM0IsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDM0MsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUUzQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsVUFBVSxDQUNsQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUM3QixJQUFJLENBQUMsYUFBYSxDQUNuQixDQUFDO1NBQ0g7S0FDRjs7OztJQUdELGFBQWE7UUFDWCxZQUFZLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7S0FDdkM7Ozs7SUFJRCxRQUFRO1FBQ04sSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ2pFOzs7O0lBQ0QsV0FBVztRQUNULElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7S0FDeEI7OztZQXRERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtnQkFDaEMsUUFBUSxFQUFFLG9CQUFvQjthQUMvQjs7OztZQUxRLGtCQUFrQjs7O2lDQU94QixLQUFLOzBCQUNMLEtBQUs7NEJBQ0wsS0FBSzt5QkFDTCxNQUFNO3dCQUNOLE1BQU07eUJBTU4sWUFBWSxTQUFDLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQzs4QkFhdEMsWUFBWSxTQUFDLFlBQVksRUFBRSxDQUFDLFFBQVEsQ0FBQzs0QkFjckMsWUFBWSxTQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBDb250ZXh0TWVudVNlcnZpY2UsIEFjdGl2ZUNvbnRleHRNZW51IH0gZnJvbSAnLi9jb250ZXh0LW1lbnUuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjb250ZXh0TWVudVRyaWdnZXJdJyxcbiAgZXhwb3J0QXM6ICdjb250ZXh0TWVudVRyaWdnZXInLFxufSlcbmV4cG9ydCBjbGFzcyBDb250ZXh0TWVudVRyaWdnZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGNvbnRleHRNZW51VHJpZ2dlcjogYW55O1xuICBASW5wdXQoKSBtZW51Q29udGV4dDogYW55O1xuICBASW5wdXQoKSBob2xkVG9EaXNwbGF5ID0gMTAwMDtcbiAgQE91dHB1dCgpIG1lbnVBY3Rpb24gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIG1lbnVDbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgbWVudTogQWN0aXZlQ29udGV4dE1lbnU7XG4gIHZpc2libGUgPSBmYWxzZTtcbiAgcHJpdmF0ZSBtb3VzZURvd25UaW1lb3V0SWQ6IGFueTtcbiAgcHJpdmF0ZSBzdWI6IFN1YnNjcmlwdGlvbjtcblxuICBASG9zdExpc3RlbmVyKCdjb250ZXh0bWVudScsIFsnJGV2ZW50J10pXG4gIGhhbmRsZU1lbnUoJGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5tZW51ID0gdGhpcy5jb250ZXh0TWVudVNlcnZpY2Uuc2hvdyhcbiAgICAgICRldmVudCxcbiAgICAgIHRoaXMuY29udGV4dE1lbnVUcmlnZ2VyLFxuICAgICAgdGhpcy5tZW51Q29udGV4dCxcbiAgICAgIHRoaXMubWVudUNsb3NlLFxuICAgICAgdGhpcy5tZW51QWN0aW9uLFxuICAgICk7XG4gICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBbJyRldmVudCddKVxuICBoYW5kbGVNb3VzZURvd24oJGV2ZW50OiBhbnkpIHtcbiAgICBpZiAodGhpcy5ob2xkVG9EaXNwbGF5ID49IDApIHtcbiAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICRldmVudC5jbGllbnRZID0gJGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICRldmVudC5jbGllbnRYID0gJGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcblxuICAgICAgdGhpcy5tb3VzZURvd25UaW1lb3V0SWQgPSBzZXRUaW1lb3V0KFxuICAgICAgICAoKSA9PiB0aGlzLmhhbmRsZU1lbnUoJGV2ZW50KSxcbiAgICAgICAgdGhpcy5ob2xkVG9EaXNwbGF5LFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCd0b3VjaGVuZCcpXG4gIGhhbmRsZU1vdXNlVXAoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubW91c2VEb3duVGltZW91dElkKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29udGV4dE1lbnVTZXJ2aWNlOiBDb250ZXh0TWVudVNlcnZpY2UpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdWIgPSB0aGlzLm1lbnVDbG9zZS5zdWJzY3JpYmUoKCkgPT4gdGhpcy52aXNpYmxlID0gZmFsc2UpO1xuICB9XG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3ViLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==