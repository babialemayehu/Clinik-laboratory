/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input, Output, EventEmitter, } from '@angular/core';
import { ContextMenuService, } from './context-menu.service';
export class ContextSubmenuTriggerDirective {
    /**
     * @param {?} contextMenuService
     */
    constructor(contextMenuService) {
        this.contextMenuService = contextMenuService;
        this.hoverDelay = 500;
        this.openDelay = 200;
        this.menuAction = new EventEmitter();
        this.menuClose = new EventEmitter();
        this.visible = false;
        this.level = 1;
        // get current level
        setTimeout(() => (this.level = this.contextMenuService.getCurrentLevel()));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleSubMenuClick($event) {
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this.opentimer);
        clearTimeout(this.closetimer);
        this.menu = this.contextMenuService.show($event, this.contextSubmenuTrigger, this.menuContext, this.menuClose, this.menuAction, true, this.level);
        this.visible = true;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleSubMenuEnter($event) {
        if (this.menu) {
            this.menu.isTriggerHovered.next(true);
        }
        clearTimeout(this.closetimer);
        this.opentimer = setTimeout(() => {
            this.menu = this.contextMenuService.show($event, this.contextSubmenuTrigger, this.menuContext, this.menuClose, this.menuAction, true, this.level);
            this.visible = true;
            this.opentimer = null;
        }, this.openDelay);
    }
    /**
     * submenu hides after cursor has exited for a period of time
     * @return {?}
     */
    handleSubMenuExit() {
        clearTimeout(this.opentimer);
        if (this.menu) {
            this.menu.isTriggerHovered.next(false);
        }
        this.closetimer = setTimeout(() => {
            if (this.menu) {
                this.menu.isTriggerHovered.next(false);
                this.contextMenuService.closeSubMenu(this.menu.id);
                this.menu = undefined;
            }
            this.visible = false;
        }, this.hoverDelay);
    }
    /**
     * if overwritten make sure to clear timeouts
     * @return {?}
     */
    ngOnDestroy() {
        clearTimeout(this.opentimer);
        clearTimeout(this.closetimer);
    }
}
ContextSubmenuTriggerDirective.decorators = [
    { type: Directive, args: [{ selector: '[contextSubmenuTrigger]' },] }
];
/** @nocollapse */
ContextSubmenuTriggerDirective.ctorParameters = () => [
    { type: ContextMenuService }
];
ContextSubmenuTriggerDirective.propDecorators = {
    hoverDelay: [{ type: Input }],
    openDelay: [{ type: Input }],
    contextSubmenuTrigger: [{ type: Input }],
    menuContext: [{ type: Input }],
    menuAction: [{ type: Output }],
    menuClose: [{ type: Output }],
    handleSubMenuClick: [{ type: HostListener, args: ['click', ['$event', 'true'],] }],
    handleSubMenuEnter: [{ type: HostListener, args: ['mouseover', ['$event'],] }],
    handleSubMenuExit: [{ type: HostListener, args: ['mouseout', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.hoverDelay;
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.openDelay;
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.contextSubmenuTrigger;
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.menuContext;
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.menuAction;
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.menuClose;
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.menu;
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.opentimer;
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.closetimer;
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.visible;
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.level;
    /** @type {?} */
    ContextSubmenuTriggerDirective.prototype.contextMenuService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1zdWJtZW51LXRyaWdnZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGN0cmwvbmd4LXJpZ2h0Y2xpY2svIiwic291cmNlcyI6WyJjb250ZXh0LXN1Ym1lbnUtdHJpZ2dlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFFTCxNQUFNLEVBQ04sWUFBWSxHQUNiLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFFTCxrQkFBa0IsR0FDbkIsTUFBTSx3QkFBd0IsQ0FBQztBQUdoQyxNQUFNOzs7O0lBdUVKLFlBQW9CLGtCQUFzQztRQUF0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9COzBCQXRFcEMsR0FBRzt5QkFDSixHQUFHOzBCQUdELElBQUksWUFBWSxFQUFPO3lCQUN4QixJQUFJLFlBQVksRUFBUTt1QkFJcEMsS0FBSztxQkFDUCxDQUFDOztRQThEUCxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDNUU7Ozs7O0lBNURELGtCQUFrQixDQUFDLE1BQWtCO1FBQ25DLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QixZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FDdEMsTUFBTSxFQUNOLElBQUksQ0FBQyxxQkFBcUIsRUFDMUIsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksRUFDSixJQUFJLENBQUMsS0FBSyxDQUNYLENBQUM7UUFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztLQUNyQjs7Ozs7SUFHRCxrQkFBa0IsQ0FBQyxNQUFrQjtRQUNuQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QztRQUNELFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQy9CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FDdEMsTUFBTSxFQUNOLElBQUksQ0FBQyxxQkFBcUIsRUFDMUIsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksRUFDSixJQUFJLENBQUMsS0FBSyxDQUNYLENBQUM7WUFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztTQUN2QixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUNwQjs7Ozs7SUFNRCxpQkFBaUI7UUFDZixZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdCLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2hDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDYixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNuRCxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQzthQUN2QjtZQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1NBQ3RCLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3JCOzs7OztJQVVELFdBQVc7UUFDVCxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdCLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDL0I7OztZQW5GRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUseUJBQXlCLEVBQUU7Ozs7WUFIaEQsa0JBQWtCOzs7eUJBS2pCLEtBQUs7d0JBQ0wsS0FBSztvQ0FDTCxLQUFLOzBCQUNMLEtBQUs7eUJBQ0wsTUFBTTt3QkFDTixNQUFNO2lDQU9OLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDO2lDQWtCeEMsWUFBWSxTQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQztnQ0F3QnBDLFlBQVksU0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICBBY3RpdmVDb250ZXh0TWVudSxcbiAgQ29udGV4dE1lbnVTZXJ2aWNlLFxufSBmcm9tICcuL2NvbnRleHQtbWVudS5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2NvbnRleHRTdWJtZW51VHJpZ2dlcl0nIH0pXG5leHBvcnQgY2xhc3MgQ29udGV4dFN1Ym1lbnVUcmlnZ2VyRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgQElucHV0KCkgaG92ZXJEZWxheSA9IDUwMDtcbiAgQElucHV0KCkgb3BlbkRlbGF5ID0gMjAwO1xuICBASW5wdXQoKSBjb250ZXh0U3VibWVudVRyaWdnZXI6IGFueTtcbiAgQElucHV0KCkgbWVudUNvbnRleHQ6IGFueTtcbiAgQE91dHB1dCgpIG1lbnVBY3Rpb24gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIG1lbnVDbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgbWVudTogQWN0aXZlQ29udGV4dE1lbnU7XG4gIG9wZW50aW1lcjogYW55O1xuICBjbG9zZXRpbWVyOiBhbnk7XG4gIHZpc2libGUgPSBmYWxzZTtcbiAgbGV2ZWwgPSAxO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnLCAndHJ1ZSddKVxuICBoYW5kbGVTdWJNZW51Q2xpY2soJGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5vcGVudGltZXIpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmNsb3NldGltZXIpO1xuICAgIHRoaXMubWVudSA9IHRoaXMuY29udGV4dE1lbnVTZXJ2aWNlLnNob3coXG4gICAgICAkZXZlbnQsXG4gICAgICB0aGlzLmNvbnRleHRTdWJtZW51VHJpZ2dlcixcbiAgICAgIHRoaXMubWVudUNvbnRleHQsXG4gICAgICB0aGlzLm1lbnVDbG9zZSxcbiAgICAgIHRoaXMubWVudUFjdGlvbixcbiAgICAgIHRydWUsXG4gICAgICB0aGlzLmxldmVsLFxuICAgICk7XG4gICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlb3ZlcicsIFsnJGV2ZW50J10pXG4gIGhhbmRsZVN1Yk1lbnVFbnRlcigkZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBpZiAodGhpcy5tZW51KSB7XG4gICAgICB0aGlzLm1lbnUuaXNUcmlnZ2VySG92ZXJlZC5uZXh0KHRydWUpO1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQodGhpcy5jbG9zZXRpbWVyKTtcbiAgICB0aGlzLm9wZW50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5tZW51ID0gdGhpcy5jb250ZXh0TWVudVNlcnZpY2Uuc2hvdyhcbiAgICAgICAgJGV2ZW50LFxuICAgICAgICB0aGlzLmNvbnRleHRTdWJtZW51VHJpZ2dlcixcbiAgICAgICAgdGhpcy5tZW51Q29udGV4dCxcbiAgICAgICAgdGhpcy5tZW51Q2xvc2UsXG4gICAgICAgIHRoaXMubWVudUFjdGlvbixcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGhpcy5sZXZlbCxcbiAgICAgICk7XG4gICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICAgICAgdGhpcy5vcGVudGltZXIgPSBudWxsO1xuICAgIH0sIHRoaXMub3BlbkRlbGF5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzdWJtZW51IGhpZGVzIGFmdGVyIGN1cnNvciBoYXMgZXhpdGVkIGZvciBhIHBlcmlvZCBvZiB0aW1lXG4gICAqL1xuICBASG9zdExpc3RlbmVyKCdtb3VzZW91dCcsIFsnJGV2ZW50J10pXG4gIGhhbmRsZVN1Yk1lbnVFeGl0KCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLm9wZW50aW1lcik7XG4gICAgaWYgKHRoaXMubWVudSkge1xuICAgICAgdGhpcy5tZW51LmlzVHJpZ2dlckhvdmVyZWQubmV4dChmYWxzZSk7XG4gICAgfVxuICAgIHRoaXMuY2xvc2V0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMubWVudSkge1xuICAgICAgICB0aGlzLm1lbnUuaXNUcmlnZ2VySG92ZXJlZC5uZXh0KGZhbHNlKTtcbiAgICAgICAgdGhpcy5jb250ZXh0TWVudVNlcnZpY2UuY2xvc2VTdWJNZW51KHRoaXMubWVudS5pZCk7XG4gICAgICAgIHRoaXMubWVudSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgIH0sIHRoaXMuaG92ZXJEZWxheSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRleHRNZW51U2VydmljZTogQ29udGV4dE1lbnVTZXJ2aWNlKSB7XG4gICAgLy8gZ2V0IGN1cnJlbnQgbGV2ZWxcbiAgICBzZXRUaW1lb3V0KCgpID0+ICh0aGlzLmxldmVsID0gdGhpcy5jb250ZXh0TWVudVNlcnZpY2UuZ2V0Q3VycmVudExldmVsKCkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBpZiBvdmVyd3JpdHRlbiBtYWtlIHN1cmUgdG8gY2xlYXIgdGltZW91dHNcbiAgICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLm9wZW50aW1lcik7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2V0aW1lcik7XG4gIH1cbn1cbiJdfQ==