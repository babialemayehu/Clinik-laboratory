import { Overlay, ScrollStrategyOptions, OverlayModule } from '@angular/cdk/overlay';
import { ComponentPortal, PortalModule } from '@angular/cdk/portal';
import { ElementRef, Injectable, Injector, NgModule, Component, HostListener, Directive, Input, Output, EventEmitter, defineInjectable, inject, INJECTOR } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { filter, take } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class MenuPackage {
    /**
     * @param {?} menu
     * @param {?} context
     */
    constructor(menu, context) {
        this.menu = menu;
        this.context = context;
    }
}
class MenuInjector {
    /**
     * @param {?} _activeContextMenu
     * @param {?} _parentInjector
     * @param {?} context
     */
    constructor(_activeContextMenu, _parentInjector, context) {
        this._activeContextMenu = _activeContextMenu;
        this._parentInjector = _parentInjector;
        this.context = context;
        this._menuContext = new MenuPackage(_activeContextMenu, context);
    }
    /**
     * @template T
     * @param {?} token
     * @param {?=} notFoundValue
     * @param {?=} flags
     * @return {?}
     */
    get(token, notFoundValue, flags) {
        if (token === MenuPackage) {
            return this._menuContext;
        }
        return this._parentInjector.get(token, notFoundValue, flags);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ContextMenuService {
    /**
     * @param {?} overlay
     * @param {?} scrollStrategy
     * @param {?} _injector
     */
    constructor(overlay, scrollStrategy, _injector) {
        this.overlay = overlay;
        this.scrollStrategy = scrollStrategy;
        this._injector = _injector;
        this.menus = [];
        this.id = 0;
    }
    /**
     *
     * @param {?} $event triggering event
     * @param {?} menuComponent the component to be shown
     * @param {?} context
     * @param {?} menuClose
     * @param {?} menuAction
     * @param {?=} submenu is a menu within a menu
     * @param {?=} level if submenu, what level
     * @return {?}
     */
    show($event, menuComponent, context, menuClose, menuAction, submenu = false, level) {
        /** @type {?} */
        let target;
        if (!submenu) {
            this.closeAll();
            target = {
                getBoundingClientRect: () => ({
                    bottom: $event.clientY,
                    height: 0,
                    left: $event.clientX,
                    right: $event.clientX,
                    top: $event.clientY,
                    width: 0,
                }),
            };
        }
        else {
            // close other submenus
            this.closeAll(undefined, level);
            target = $event.target;
        }
        /** @type {?} */
        const el = new ElementRef(target);
        /** @type {?} */
        const positionStrategy = this.overlay
            .position()
            .flexibleConnectedTo(el)
            .withFlexibleDimensions(false);
        if (!submenu) {
            positionStrategy.withPositions([
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'bottom',
                },
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'top',
                },
                {
                    originX: 'end',
                    originY: 'center',
                    overlayX: 'start',
                    overlayY: 'center',
                },
                {
                    originX: 'start',
                    originY: 'center',
                    overlayX: 'end',
                    overlayY: 'center',
                },
            ]);
        }
        else {
            positionStrategy.withPositions([
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'top',
                },
                {
                    originX: 'end',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'bottom',
                },
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'end',
                    overlayY: 'bottom',
                },
            ]);
        }
        /** @type {?} */
        const t = {
            submenu,
            id: this.id++,
            isMenuHovered: new BehaviorSubject(false),
            isTriggerHovered: new BehaviorSubject(false),
        };
        /** @type {?} */
        const menuInjector = new MenuInjector(t, this._injector, context);
        /** @type {?} */
        const componentPortal = new ComponentPortal(menuComponent, undefined, menuInjector);
        /** @type {?} */
        const overlayRef = this.overlay.create({
            positionStrategy,
            panelClass: 'ngx-contextmenu',
            scrollStrategy: this.scrollStrategy.close(),
        });
        /** @type {?} */
        const component = overlayRef.attach(componentPortal);
        /** @type {?} */
        const res = Object.assign({ overlayRef, component }, t, { menuClose, menuAction });
        this.menus.push(res);
        return res;
    }
    /**
     * @return {?}
     */
    getCurrentLevel() {
        return this.menus.length;
    }
    /**
     * @param {?=} context
     * @param {?=} idx
     * @return {?}
     */
    closeAll(context, idx = 0) {
        for (let index = idx; index < this.menus.length; index++) {
            /** @type {?} */
            const menu = this.menus[index];
            this.destroyMenu(menu, context);
        }
        this.menus.splice(idx, this.menus.length);
    }
    /**
     * @param {?} menu
     * @param {?=} context
     * @return {?}
     */
    destroyMenu(menu, context) {
        menu.component.instance._state = 'exit';
        if (menu.component.instance.lazy) {
            menu.component.instance._animationDone
                .pipe(filter((event) => event.toState === 'exit'), take(1))
                .subscribe(() => {
                menu.overlayRef.detach();
                menu.overlayRef.dispose();
            });
        }
        else {
            menu.overlayRef.detach();
            menu.overlayRef.dispose();
        }
        if (context) {
            menu.menuAction.next(context);
        }
        menu.menuClose.next();
    }
    /**
     * @param {?} menu
     * @param {?} menuIndex
     * @param {?=} context
     * @return {?}
     */
    close(menu, menuIndex, context) {
        this.destroyMenu(menu, context);
        this.menus.splice(menuIndex, 1);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    checkOutsideClick($event) {
        for (const m of this.menus) {
            /** @type {?} */
            const clickedInside = m.component.location.nativeElement.contains($event.target);
            if (clickedInside) {
                $event.preventDefault();
                $event.stopPropagation();
                return;
            }
        }
        this.closeAll();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    closeSubMenu(id) {
        /** @type {?} */
        const menuIndex = this.menus.findIndex(n => n.id === id);
        if (menuIndex === -1 || menuIndex !== this.menus.length - 1) {
            return;
        }
        /** @type {?} */
        const menu = this.menus[menuIndex];
        if (menu.isMenuHovered.getValue() || menu.isTriggerHovered.getValue()) {
            return;
        }
        // close all menus up if possible
        for (let index = this.menus.length - 1; index >= 1; index--) {
            /** @type {?} */
            const m = this.menus[index];
            if (!m.isMenuHovered.getValue() && !m.isTriggerHovered.getValue()) {
                this.close(m, index);
            }
            else {
                return;
            }
        }
    }
}
ContextMenuService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ContextMenuService.ctorParameters = () => [
    { type: Overlay },
    { type: ScrollStrategyOptions },
    { type: Injector }
];
/** @nocollapse */ ContextMenuService.ngInjectableDef = defineInjectable({ factory: function ContextMenuService_Factory() { return new ContextMenuService(inject(Overlay), inject(ScrollStrategyOptions), inject(INJECTOR)); }, token: ContextMenuService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ContextMenuTriggerDirective {
    /**
     * @param {?} contextMenuService
     */
    constructor(contextMenuService) {
        this.contextMenuService = contextMenuService;
        this.holdToDisplay = 1000;
        this.menuAction = new EventEmitter();
        this.menuClose = new EventEmitter();
        this.visible = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleMenu($event) {
        $event.preventDefault();
        this.menu = this.contextMenuService.show($event, this.contextMenuTrigger, this.menuContext, this.menuClose, this.menuAction);
        this.visible = true;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleMouseDown($event) {
        if (this.holdToDisplay >= 0) {
            $event.stopPropagation();
            $event.clientY = $event.touches[0].clientY;
            $event.clientX = $event.touches[0].clientX;
            this.mouseDownTimeoutId = setTimeout(() => this.handleMenu($event), this.holdToDisplay);
        }
    }
    /**
     * @return {?}
     */
    handleMouseUp() {
        clearTimeout(this.mouseDownTimeoutId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.sub = this.menuClose.subscribe(() => this.visible = false);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.sub.unsubscribe();
    }
}
ContextMenuTriggerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[contextMenuTrigger]',
                exportAs: 'contextMenuTrigger',
            },] }
];
/** @nocollapse */
ContextMenuTriggerDirective.ctorParameters = () => [
    { type: ContextMenuService }
];
ContextMenuTriggerDirective.propDecorators = {
    contextMenuTrigger: [{ type: Input }],
    menuContext: [{ type: Input }],
    holdToDisplay: [{ type: Input }],
    menuAction: [{ type: Output }],
    menuClose: [{ type: Output }],
    handleMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }],
    handleMouseDown: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
    handleMouseUp: [{ type: HostListener, args: ['touchend',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ContextSubmenuTriggerDirective {
    /**
     * @param {?} contextMenuService
     */
    constructor(contextMenuService) {
        this.contextMenuService = contextMenuService;
        this.hoverDelay = 500;
        this.openDelay = 200;
        this.menuAction = new EventEmitter();
        this.menuClose = new EventEmitter();
        this.visible = false;
        this.level = 1;
        // get current level
        setTimeout(() => (this.level = this.contextMenuService.getCurrentLevel()));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleSubMenuClick($event) {
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this.opentimer);
        clearTimeout(this.closetimer);
        this.menu = this.contextMenuService.show($event, this.contextSubmenuTrigger, this.menuContext, this.menuClose, this.menuAction, true, this.level);
        this.visible = true;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleSubMenuEnter($event) {
        if (this.menu) {
            this.menu.isTriggerHovered.next(true);
        }
        clearTimeout(this.closetimer);
        this.opentimer = setTimeout(() => {
            this.menu = this.contextMenuService.show($event, this.contextSubmenuTrigger, this.menuContext, this.menuClose, this.menuAction, true, this.level);
            this.visible = true;
            this.opentimer = null;
        }, this.openDelay);
    }
    /**
     * submenu hides after cursor has exited for a period of time
     * @return {?}
     */
    handleSubMenuExit() {
        clearTimeout(this.opentimer);
        if (this.menu) {
            this.menu.isTriggerHovered.next(false);
        }
        this.closetimer = setTimeout(() => {
            if (this.menu) {
                this.menu.isTriggerHovered.next(false);
                this.contextMenuService.closeSubMenu(this.menu.id);
                this.menu = undefined;
            }
            this.visible = false;
        }, this.hoverDelay);
    }
    /**
     * if overwritten make sure to clear timeouts
     * @return {?}
     */
    ngOnDestroy() {
        clearTimeout(this.opentimer);
        clearTimeout(this.closetimer);
    }
}
ContextSubmenuTriggerDirective.decorators = [
    { type: Directive, args: [{ selector: '[contextSubmenuTrigger]' },] }
];
/** @nocollapse */
ContextSubmenuTriggerDirective.ctorParameters = () => [
    { type: ContextMenuService }
];
ContextSubmenuTriggerDirective.propDecorators = {
    hoverDelay: [{ type: Input }],
    openDelay: [{ type: Input }],
    contextSubmenuTrigger: [{ type: Input }],
    menuContext: [{ type: Input }],
    menuAction: [{ type: Output }],
    menuClose: [{ type: Output }],
    handleSubMenuClick: [{ type: HostListener, args: ['click', ['$event', 'true'],] }],
    handleSubMenuEnter: [{ type: HostListener, args: ['mouseover', ['$event'],] }],
    handleSubMenuExit: [{ type: HostListener, args: ['mouseout', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class MenuComponent {
    /**
     * @param {?} menuPackage
     * @param {?} contextMenuService
     */
    constructor(menuPackage, contextMenuService) {
        this.menuPackage = menuPackage;
        this.contextMenuService = contextMenuService;
        /**
         * State of the dialog animation.
         */
        this._state = 'enter';
        this._animationDone = new Subject();
        /**
         * set lazy to False if you do not have animations
         */
        this.lazy = true;
    }
    /**
     * @return {?}
     */
    handleMouseover() {
        if (!this.menuPackage.menu.submenu) {
            return;
        }
        this.menuPackage.menu.isMenuHovered.next(true);
        clearTimeout(this.closetimer);
    }
    /**
     * @return {?}
     */
    handleMouseleave() {
        if (!this.menuPackage.menu.submenu) {
            return;
        }
        this.menuPackage.menu.isMenuHovered.next(false);
        this.closetimer = setTimeout(() => {
            this.contextMenuService.closeSubMenu(this.menuPackage.menu.id);
        }, 500);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleWindowClick($event) {
        this.contextMenuService.checkOutsideClick($event);
    }
    /**
     * Callback that is invoked when the menu animation completes.
     * @param {?} event
     * @return {?}
     */
    _onAnimationDone(event) {
        this._animationDone.next(event);
    }
}
MenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-menu',
                template: ``
            }] }
];
/** @nocollapse */
MenuComponent.ctorParameters = () => [
    { type: MenuPackage },
    { type: ContextMenuService }
];
MenuComponent.propDecorators = {
    handleMouseover: [{ type: HostListener, args: ['mouseover',] }],
    handleMouseleave: [{ type: HostListener, args: ['mouseleave',] }],
    handleWindowClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ContextMenuModule {
}
ContextMenuModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ContextMenuTriggerDirective,
                    ContextSubmenuTriggerDirective,
                    MenuComponent,
                ],
                exports: [ContextMenuTriggerDirective, ContextSubmenuTriggerDirective],
                imports: [PortalModule, OverlayModule],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { ContextMenuModule, MenuPackage, MenuInjector, MenuComponent, ContextSubmenuTriggerDirective, ContextMenuTriggerDirective, ContextMenuService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,