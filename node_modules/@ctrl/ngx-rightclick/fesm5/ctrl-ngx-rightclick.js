import { __assign, __values } from 'tslib';
import { Overlay, ScrollStrategyOptions, OverlayModule } from '@angular/cdk/overlay';
import { ComponentPortal, PortalModule } from '@angular/cdk/portal';
import { ElementRef, Injectable, Injector, NgModule, Component, HostListener, Directive, Input, Output, EventEmitter, defineInjectable, inject, INJECTOR } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { filter, take } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MenuPackage = /** @class */ (function () {
    function MenuPackage(menu, context) {
        this.menu = menu;
        this.context = context;
    }
    return MenuPackage;
}());
var MenuInjector = /** @class */ (function () {
    function MenuInjector(_activeContextMenu, _parentInjector, context) {
        this._activeContextMenu = _activeContextMenu;
        this._parentInjector = _parentInjector;
        this.context = context;
        this._menuContext = new MenuPackage(_activeContextMenu, context);
    }
    /**
     * @template T
     * @param {?} token
     * @param {?=} notFoundValue
     * @param {?=} flags
     * @return {?}
     */
    MenuInjector.prototype.get = /**
     * @template T
     * @param {?} token
     * @param {?=} notFoundValue
     * @param {?=} flags
     * @return {?}
     */
    function (token, notFoundValue, flags) {
        if (token === MenuPackage) {
            return this._menuContext;
        }
        return this._parentInjector.get(token, notFoundValue, flags);
    };
    return MenuInjector;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContextMenuService = /** @class */ (function () {
    function ContextMenuService(overlay, scrollStrategy, _injector) {
        this.overlay = overlay;
        this.scrollStrategy = scrollStrategy;
        this._injector = _injector;
        this.menus = [];
        this.id = 0;
    }
    /**
     *
     * @param $event triggering event
     * @param menuComponent the component to be shown
     * @param submenu is a menu within a menu
     * @param level if submenu, what level
     */
    /**
     *
     * @param {?} $event triggering event
     * @param {?} menuComponent the component to be shown
     * @param {?} context
     * @param {?} menuClose
     * @param {?} menuAction
     * @param {?=} submenu is a menu within a menu
     * @param {?=} level if submenu, what level
     * @return {?}
     */
    ContextMenuService.prototype.show = /**
     *
     * @param {?} $event triggering event
     * @param {?} menuComponent the component to be shown
     * @param {?} context
     * @param {?} menuClose
     * @param {?} menuAction
     * @param {?=} submenu is a menu within a menu
     * @param {?=} level if submenu, what level
     * @return {?}
     */
    function ($event, menuComponent, context, menuClose, menuAction, submenu, level) {
        if (submenu === void 0) { submenu = false; }
        /** @type {?} */
        var target;
        if (!submenu) {
            this.closeAll();
            target = {
                getBoundingClientRect: function () { return ({
                    bottom: $event.clientY,
                    height: 0,
                    left: $event.clientX,
                    right: $event.clientX,
                    top: $event.clientY,
                    width: 0,
                }); },
            };
        }
        else {
            // close other submenus
            this.closeAll(undefined, level);
            target = $event.target;
        }
        /** @type {?} */
        var el = new ElementRef(target);
        /** @type {?} */
        var positionStrategy = this.overlay
            .position()
            .flexibleConnectedTo(el)
            .withFlexibleDimensions(false);
        if (!submenu) {
            positionStrategy.withPositions([
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'bottom',
                },
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'top',
                },
                {
                    originX: 'end',
                    originY: 'center',
                    overlayX: 'start',
                    overlayY: 'center',
                },
                {
                    originX: 'start',
                    originY: 'center',
                    overlayX: 'end',
                    overlayY: 'center',
                },
            ]);
        }
        else {
            positionStrategy.withPositions([
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'top',
                },
                {
                    originX: 'end',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'bottom',
                },
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'end',
                    overlayY: 'bottom',
                },
            ]);
        }
        /** @type {?} */
        var t = {
            submenu: submenu,
            id: this.id++,
            isMenuHovered: new BehaviorSubject(false),
            isTriggerHovered: new BehaviorSubject(false),
        };
        /** @type {?} */
        var menuInjector = new MenuInjector(t, this._injector, context);
        /** @type {?} */
        var componentPortal = new ComponentPortal(menuComponent, undefined, menuInjector);
        /** @type {?} */
        var overlayRef = this.overlay.create({
            positionStrategy: positionStrategy,
            panelClass: 'ngx-contextmenu',
            scrollStrategy: this.scrollStrategy.close(),
        });
        /** @type {?} */
        var component = overlayRef.attach(componentPortal);
        /** @type {?} */
        var res = __assign({ overlayRef: overlayRef, component: component }, t, { menuClose: menuClose, menuAction: menuAction });
        this.menus.push(res);
        return res;
    };
    /**
     * @return {?}
     */
    ContextMenuService.prototype.getCurrentLevel = /**
     * @return {?}
     */
    function () {
        return this.menus.length;
    };
    /**
     * @param {?=} context
     * @param {?=} idx
     * @return {?}
     */
    ContextMenuService.prototype.closeAll = /**
     * @param {?=} context
     * @param {?=} idx
     * @return {?}
     */
    function (context, idx) {
        if (idx === void 0) { idx = 0; }
        for (var index = idx; index < this.menus.length; index++) {
            /** @type {?} */
            var menu = this.menus[index];
            this.destroyMenu(menu, context);
        }
        this.menus.splice(idx, this.menus.length);
    };
    /**
     * @param {?} menu
     * @param {?=} context
     * @return {?}
     */
    ContextMenuService.prototype.destroyMenu = /**
     * @param {?} menu
     * @param {?=} context
     * @return {?}
     */
    function (menu, context) {
        menu.component.instance._state = 'exit';
        if (menu.component.instance.lazy) {
            menu.component.instance._animationDone
                .pipe(filter(function (event) { return event.toState === 'exit'; }), take(1))
                .subscribe(function () {
                menu.overlayRef.detach();
                menu.overlayRef.dispose();
            });
        }
        else {
            menu.overlayRef.detach();
            menu.overlayRef.dispose();
        }
        if (context) {
            menu.menuAction.next(context);
        }
        menu.menuClose.next();
    };
    /**
     * @param {?} menu
     * @param {?} menuIndex
     * @param {?=} context
     * @return {?}
     */
    ContextMenuService.prototype.close = /**
     * @param {?} menu
     * @param {?} menuIndex
     * @param {?=} context
     * @return {?}
     */
    function (menu, menuIndex, context) {
        this.destroyMenu(menu, context);
        this.menus.splice(menuIndex, 1);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ContextMenuService.prototype.checkOutsideClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var e_1, _a;
        try {
            for (var _b = __values(this.menus), _c = _b.next(); !_c.done; _c = _b.next()) {
                var m = _c.value;
                /** @type {?} */
                var clickedInside = m.component.location.nativeElement.contains($event.target);
                if (clickedInside) {
                    $event.preventDefault();
                    $event.stopPropagation();
                    return;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.closeAll();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ContextMenuService.prototype.closeSubMenu = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var menuIndex = this.menus.findIndex(function (n) { return n.id === id; });
        if (menuIndex === -1 || menuIndex !== this.menus.length - 1) {
            return;
        }
        /** @type {?} */
        var menu = this.menus[menuIndex];
        if (menu.isMenuHovered.getValue() || menu.isTriggerHovered.getValue()) {
            return;
        }
        // close all menus up if possible
        for (var index = this.menus.length - 1; index >= 1; index--) {
            /** @type {?} */
            var m = this.menus[index];
            if (!m.isMenuHovered.getValue() && !m.isTriggerHovered.getValue()) {
                this.close(m, index);
            }
            else {
                return;
            }
        }
    };
    ContextMenuService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ContextMenuService.ctorParameters = function () { return [
        { type: Overlay },
        { type: ScrollStrategyOptions },
        { type: Injector }
    ]; };
    /** @nocollapse */ ContextMenuService.ngInjectableDef = defineInjectable({ factory: function ContextMenuService_Factory() { return new ContextMenuService(inject(Overlay), inject(ScrollStrategyOptions), inject(INJECTOR)); }, token: ContextMenuService, providedIn: "root" });
    return ContextMenuService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContextMenuTriggerDirective = /** @class */ (function () {
    function ContextMenuTriggerDirective(contextMenuService) {
        this.contextMenuService = contextMenuService;
        this.holdToDisplay = 1000;
        this.menuAction = new EventEmitter();
        this.menuClose = new EventEmitter();
        this.visible = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ContextMenuTriggerDirective.prototype.handleMenu = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.preventDefault();
        this.menu = this.contextMenuService.show($event, this.contextMenuTrigger, this.menuContext, this.menuClose, this.menuAction);
        this.visible = true;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ContextMenuTriggerDirective.prototype.handleMouseDown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (this.holdToDisplay >= 0) {
            $event.stopPropagation();
            $event.clientY = $event.touches[0].clientY;
            $event.clientX = $event.touches[0].clientX;
            this.mouseDownTimeoutId = setTimeout(function () { return _this.handleMenu($event); }, this.holdToDisplay);
        }
    };
    /**
     * @return {?}
     */
    ContextMenuTriggerDirective.prototype.handleMouseUp = /**
     * @return {?}
     */
    function () {
        clearTimeout(this.mouseDownTimeoutId);
    };
    /**
     * @return {?}
     */
    ContextMenuTriggerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.sub = this.menuClose.subscribe(function () { return _this.visible = false; });
    };
    /**
     * @return {?}
     */
    ContextMenuTriggerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.sub.unsubscribe();
    };
    ContextMenuTriggerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[contextMenuTrigger]',
                    exportAs: 'contextMenuTrigger',
                },] }
    ];
    /** @nocollapse */
    ContextMenuTriggerDirective.ctorParameters = function () { return [
        { type: ContextMenuService }
    ]; };
    ContextMenuTriggerDirective.propDecorators = {
        contextMenuTrigger: [{ type: Input }],
        menuContext: [{ type: Input }],
        holdToDisplay: [{ type: Input }],
        menuAction: [{ type: Output }],
        menuClose: [{ type: Output }],
        handleMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }],
        handleMouseDown: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
        handleMouseUp: [{ type: HostListener, args: ['touchend',] }]
    };
    return ContextMenuTriggerDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContextSubmenuTriggerDirective = /** @class */ (function () {
    function ContextSubmenuTriggerDirective(contextMenuService) {
        var _this = this;
        this.contextMenuService = contextMenuService;
        this.hoverDelay = 500;
        this.openDelay = 200;
        this.menuAction = new EventEmitter();
        this.menuClose = new EventEmitter();
        this.visible = false;
        this.level = 1;
        // get current level
        setTimeout(function () { return (_this.level = _this.contextMenuService.getCurrentLevel()); });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ContextSubmenuTriggerDirective.prototype.handleSubMenuClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this.opentimer);
        clearTimeout(this.closetimer);
        this.menu = this.contextMenuService.show($event, this.contextSubmenuTrigger, this.menuContext, this.menuClose, this.menuAction, true, this.level);
        this.visible = true;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ContextSubmenuTriggerDirective.prototype.handleSubMenuEnter = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (this.menu) {
            this.menu.isTriggerHovered.next(true);
        }
        clearTimeout(this.closetimer);
        this.opentimer = setTimeout(function () {
            _this.menu = _this.contextMenuService.show($event, _this.contextSubmenuTrigger, _this.menuContext, _this.menuClose, _this.menuAction, true, _this.level);
            _this.visible = true;
            _this.opentimer = null;
        }, this.openDelay);
    };
    /**
     * submenu hides after cursor has exited for a period of time
     */
    /**
     * submenu hides after cursor has exited for a period of time
     * @return {?}
     */
    ContextSubmenuTriggerDirective.prototype.handleSubMenuExit = /**
     * submenu hides after cursor has exited for a period of time
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.opentimer);
        if (this.menu) {
            this.menu.isTriggerHovered.next(false);
        }
        this.closetimer = setTimeout(function () {
            if (_this.menu) {
                _this.menu.isTriggerHovered.next(false);
                _this.contextMenuService.closeSubMenu(_this.menu.id);
                _this.menu = undefined;
            }
            _this.visible = false;
        }, this.hoverDelay);
    };
    /**
     * if overwritten make sure to clear timeouts
     */
    /**
     * if overwritten make sure to clear timeouts
     * @return {?}
     */
    ContextSubmenuTriggerDirective.prototype.ngOnDestroy = /**
     * if overwritten make sure to clear timeouts
     * @return {?}
     */
    function () {
        clearTimeout(this.opentimer);
        clearTimeout(this.closetimer);
    };
    ContextSubmenuTriggerDirective.decorators = [
        { type: Directive, args: [{ selector: '[contextSubmenuTrigger]' },] }
    ];
    /** @nocollapse */
    ContextSubmenuTriggerDirective.ctorParameters = function () { return [
        { type: ContextMenuService }
    ]; };
    ContextSubmenuTriggerDirective.propDecorators = {
        hoverDelay: [{ type: Input }],
        openDelay: [{ type: Input }],
        contextSubmenuTrigger: [{ type: Input }],
        menuContext: [{ type: Input }],
        menuAction: [{ type: Output }],
        menuClose: [{ type: Output }],
        handleSubMenuClick: [{ type: HostListener, args: ['click', ['$event', 'true'],] }],
        handleSubMenuEnter: [{ type: HostListener, args: ['mouseover', ['$event'],] }],
        handleSubMenuExit: [{ type: HostListener, args: ['mouseout', ['$event'],] }]
    };
    return ContextSubmenuTriggerDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MenuComponent = /** @class */ (function () {
    function MenuComponent(menuPackage, contextMenuService) {
        this.menuPackage = menuPackage;
        this.contextMenuService = contextMenuService;
        /**
         * State of the dialog animation.
         */
        this._state = 'enter';
        this._animationDone = new Subject();
        /**
         * set lazy to False if you do not have animations
         */
        this.lazy = true;
    }
    /**
     * @return {?}
     */
    MenuComponent.prototype.handleMouseover = /**
     * @return {?}
     */
    function () {
        if (!this.menuPackage.menu.submenu) {
            return;
        }
        this.menuPackage.menu.isMenuHovered.next(true);
        clearTimeout(this.closetimer);
    };
    /**
     * @return {?}
     */
    MenuComponent.prototype.handleMouseleave = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.menuPackage.menu.submenu) {
            return;
        }
        this.menuPackage.menu.isMenuHovered.next(false);
        this.closetimer = setTimeout(function () {
            _this.contextMenuService.closeSubMenu(_this.menuPackage.menu.id);
        }, 500);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    MenuComponent.prototype.handleWindowClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.contextMenuService.checkOutsideClick($event);
    };
    /** Callback that is invoked when the menu animation completes. */
    /**
     * Callback that is invoked when the menu animation completes.
     * @param {?} event
     * @return {?}
     */
    MenuComponent.prototype._onAnimationDone = /**
     * Callback that is invoked when the menu animation completes.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._animationDone.next(event);
    };
    MenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-menu',
                    template: ""
                }] }
    ];
    /** @nocollapse */
    MenuComponent.ctorParameters = function () { return [
        { type: MenuPackage },
        { type: ContextMenuService }
    ]; };
    MenuComponent.propDecorators = {
        handleMouseover: [{ type: HostListener, args: ['mouseover',] }],
        handleMouseleave: [{ type: HostListener, args: ['mouseleave',] }],
        handleWindowClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
    };
    return MenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ContextMenuModule = /** @class */ (function () {
    function ContextMenuModule() {
    }
    ContextMenuModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ContextMenuTriggerDirective,
                        ContextSubmenuTriggerDirective,
                        MenuComponent,
                    ],
                    exports: [ContextMenuTriggerDirective, ContextSubmenuTriggerDirective],
                    imports: [PortalModule, OverlayModule],
                },] }
    ];
    return ContextMenuModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { ContextMenuModule, MenuPackage, MenuInjector, MenuComponent, ContextSubmenuTriggerDirective, ContextMenuTriggerDirective, ContextMenuService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,