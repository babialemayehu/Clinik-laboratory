/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, HostListener } from '@angular/core';
import { ContextMenuService } from './context-menu.service';
import { MenuPackage } from './context-menu-injector';
import { Subject } from 'rxjs';
var MenuComponent = /** @class */ (function () {
    function MenuComponent(menuPackage, contextMenuService) {
        this.menuPackage = menuPackage;
        this.contextMenuService = contextMenuService;
        /**
         * State of the dialog animation.
         */
        this._state = 'enter';
        this._animationDone = new Subject();
        /**
         * set lazy to False if you do not have animations
         */
        this.lazy = true;
    }
    /**
     * @return {?}
     */
    MenuComponent.prototype.handleMouseover = /**
     * @return {?}
     */
    function () {
        if (!this.menuPackage.menu.submenu) {
            return;
        }
        this.menuPackage.menu.isMenuHovered.next(true);
        clearTimeout(this.closetimer);
    };
    /**
     * @return {?}
     */
    MenuComponent.prototype.handleMouseleave = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.menuPackage.menu.submenu) {
            return;
        }
        this.menuPackage.menu.isMenuHovered.next(false);
        this.closetimer = setTimeout(function () {
            _this.contextMenuService.closeSubMenu(_this.menuPackage.menu.id);
        }, 500);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    MenuComponent.prototype.handleWindowClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.contextMenuService.checkOutsideClick($event);
    };
    /** Callback that is invoked when the menu animation completes. */
    /**
     * Callback that is invoked when the menu animation completes.
     * @param {?} event
     * @return {?}
     */
    MenuComponent.prototype._onAnimationDone = /**
     * Callback that is invoked when the menu animation completes.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._animationDone.next(event);
    };
    MenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-menu',
                    template: ""
                }] }
    ];
    /** @nocollapse */
    MenuComponent.ctorParameters = function () { return [
        { type: MenuPackage },
        { type: ContextMenuService }
    ]; };
    MenuComponent.propDecorators = {
        handleMouseover: [{ type: HostListener, args: ['mouseover',] }],
        handleMouseleave: [{ type: HostListener, args: ['mouseleave',] }],
        handleWindowClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
    };
    return MenuComponent;
}());
export { MenuComponent };
if (false) {
    /**
     * State of the dialog animation.
     * @type {?}
     */
    MenuComponent.prototype._state;
    /** @type {?} */
    MenuComponent.prototype._animationDone;
    /**
     * set lazy to False if you do not have animations
     * @type {?}
     */
    MenuComponent.prototype.lazy;
    /** @type {?} */
    MenuComponent.prototype.closetimer;
    /** @type {?} */
    MenuComponent.prototype.menuPackage;
    /** @type {?} */
    MenuComponent.prototype.contextMenuService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY3RybC9uZ3gtcmlnaHRjbGljay8iLCJzb3VyY2VzIjpbIm1lbnUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUF1QzdCLHVCQUNTLGFBQ0E7UUFEQSxnQkFBVyxHQUFYLFdBQVc7UUFDWCx1QkFBa0IsR0FBbEIsa0JBQWtCOzs7O3NCQWpDUyxPQUFPOzhCQUMxQixJQUFJLE9BQU8sRUFBa0I7Ozs7b0JBRXZDLElBQUk7S0ErQlA7Ozs7SUEzQkosdUNBQWU7OztJQURmO1FBRUUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDL0I7Ozs7SUFHRCx3Q0FBZ0I7OztJQURoQjtRQUFBLGlCQVNDO1FBUEMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1lBQzNCLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDaEUsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNUOzs7OztJQUdELHlDQUFpQjs7OztJQURqQixVQUNrQixNQUFrQjtRQUNsQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbkQ7SUFPRCxrRUFBa0U7Ozs7OztJQUNsRSx3Q0FBZ0I7Ozs7O0lBQWhCLFVBQWlCLEtBQXFCO1FBQ3BDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2pDOztnQkE3Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxVQUFVO29CQUNwQixRQUFRLEVBQUUsRUFBRTtpQkFDYjs7OztnQkFOUSxXQUFXO2dCQURYLGtCQUFrQjs7O2tDQWdCeEIsWUFBWSxTQUFDLFdBQVc7bUNBU3hCLFlBQVksU0FBQyxZQUFZO29DQVd6QixZQUFZLFNBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUM7O3dCQXZDNUM7O1NBV2EsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmltYXRpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5pbXBvcnQgeyBDb250ZXh0TWVudVNlcnZpY2UgfSBmcm9tICcuL2NvbnRleHQtbWVudS5zZXJ2aWNlJztcbmltcG9ydCB7IE1lbnVQYWNrYWdlIH0gZnJvbSAnLi9jb250ZXh0LW1lbnUtaW5qZWN0b3InO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtbWVudScsXG4gIHRlbXBsYXRlOiBgYCxcbn0pXG5leHBvcnQgY2xhc3MgTWVudUNvbXBvbmVudCB7XG4gIC8qKiBTdGF0ZSBvZiB0aGUgZGlhbG9nIGFuaW1hdGlvbi4gKi9cbiAgX3N0YXRlOiAndm9pZCcgfCAnZW50ZXInIHwgJ2V4aXQnID0gJ2VudGVyJztcbiAgX2FuaW1hdGlvbkRvbmUgPSBuZXcgU3ViamVjdDxBbmltYXRpb25FdmVudD4oKTtcbiAgLyoqIHNldCBsYXp5IHRvIEZhbHNlIGlmIHlvdSBkbyBub3QgaGF2ZSBhbmltYXRpb25zICovXG4gIGxhenkgPSB0cnVlO1xuICBjbG9zZXRpbWVyOiBhbnk7XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VvdmVyJylcbiAgaGFuZGxlTW91c2VvdmVyKCkge1xuICAgIGlmICghdGhpcy5tZW51UGFja2FnZS5tZW51LnN1Ym1lbnUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5tZW51UGFja2FnZS5tZW51LmlzTWVudUhvdmVyZWQubmV4dCh0cnVlKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5jbG9zZXRpbWVyKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlbGVhdmUnKVxuICBoYW5kbGVNb3VzZWxlYXZlKCkge1xuICAgIGlmICghdGhpcy5tZW51UGFja2FnZS5tZW51LnN1Ym1lbnUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5tZW51UGFja2FnZS5tZW51LmlzTWVudUhvdmVyZWQubmV4dChmYWxzZSk7XG4gICAgdGhpcy5jbG9zZXRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmNvbnRleHRNZW51U2VydmljZS5jbG9zZVN1Yk1lbnUodGhpcy5tZW51UGFja2FnZS5tZW51LmlkKTtcbiAgICB9LCA1MDApO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6Y2xpY2snLCBbJyRldmVudCddKVxuICBoYW5kbGVXaW5kb3dDbGljaygkZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLmNvbnRleHRNZW51U2VydmljZS5jaGVja091dHNpZGVDbGljaygkZXZlbnQpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIG1lbnVQYWNrYWdlOiBNZW51UGFja2FnZSxcbiAgICBwdWJsaWMgY29udGV4dE1lbnVTZXJ2aWNlOiBDb250ZXh0TWVudVNlcnZpY2UsXG4gICkge31cblxuICAvKiogQ2FsbGJhY2sgdGhhdCBpcyBpbnZva2VkIHdoZW4gdGhlIG1lbnUgYW5pbWF0aW9uIGNvbXBsZXRlcy4gKi9cbiAgX29uQW5pbWF0aW9uRG9uZShldmVudDogQW5pbWF0aW9uRXZlbnQpIHtcbiAgICB0aGlzLl9hbmltYXRpb25Eb25lLm5leHQoZXZlbnQpO1xuICB9XG59XG4iXX0=