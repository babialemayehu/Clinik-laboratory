/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Overlay, ScrollStrategyOptions, } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { ElementRef, Injectable, Injector } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { MenuInjector } from './context-menu-injector';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
/**
 * @record
 */
export function ActiveContextMenuSub() { }
/** @type {?} */
ActiveContextMenuSub.prototype.id;
/** @type {?} */
ActiveContextMenuSub.prototype.isTriggerHovered;
/** @type {?} */
ActiveContextMenuSub.prototype.isMenuHovered;
/** @type {?} */
ActiveContextMenuSub.prototype.submenu;
/**
 * @record
 */
export function ActiveContextMenu() { }
/** @type {?} */
ActiveContextMenu.prototype.overlayRef;
/** @type {?} */
ActiveContextMenu.prototype.component;
/** @type {?} */
ActiveContextMenu.prototype.menuClose;
/** @type {?} */
ActiveContextMenu.prototype.menuAction;
var ContextMenuService = /** @class */ (function () {
    function ContextMenuService(overlay, scrollStrategy, _injector) {
        this.overlay = overlay;
        this.scrollStrategy = scrollStrategy;
        this._injector = _injector;
        this.menus = [];
        this.id = 0;
    }
    /**
     *
     * @param $event triggering event
     * @param menuComponent the component to be shown
     * @param submenu is a menu within a menu
     * @param level if submenu, what level
     */
    /**
     *
     * @param {?} $event triggering event
     * @param {?} menuComponent the component to be shown
     * @param {?} context
     * @param {?} menuClose
     * @param {?} menuAction
     * @param {?=} submenu is a menu within a menu
     * @param {?=} level if submenu, what level
     * @return {?}
     */
    ContextMenuService.prototype.show = /**
     *
     * @param {?} $event triggering event
     * @param {?} menuComponent the component to be shown
     * @param {?} context
     * @param {?} menuClose
     * @param {?} menuAction
     * @param {?=} submenu is a menu within a menu
     * @param {?=} level if submenu, what level
     * @return {?}
     */
    function ($event, menuComponent, context, menuClose, menuAction, submenu, level) {
        if (submenu === void 0) { submenu = false; }
        /** @type {?} */
        var target;
        if (!submenu) {
            this.closeAll();
            target = {
                getBoundingClientRect: function () { return ({
                    bottom: $event.clientY,
                    height: 0,
                    left: $event.clientX,
                    right: $event.clientX,
                    top: $event.clientY,
                    width: 0,
                }); },
            };
        }
        else {
            // close other submenus
            this.closeAll(undefined, level);
            target = $event.target;
        }
        /** @type {?} */
        var el = new ElementRef(target);
        /** @type {?} */
        var positionStrategy = this.overlay
            .position()
            .flexibleConnectedTo(el)
            .withFlexibleDimensions(false);
        if (!submenu) {
            positionStrategy.withPositions([
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'bottom',
                },
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'top',
                },
                {
                    originX: 'end',
                    originY: 'center',
                    overlayX: 'start',
                    overlayY: 'center',
                },
                {
                    originX: 'start',
                    originY: 'center',
                    overlayX: 'end',
                    overlayY: 'center',
                },
            ]);
        }
        else {
            positionStrategy.withPositions([
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'top',
                },
                {
                    originX: 'end',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'bottom',
                },
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'end',
                    overlayY: 'bottom',
                },
            ]);
        }
        /** @type {?} */
        var t = {
            submenu: submenu,
            id: this.id++,
            isMenuHovered: new BehaviorSubject(false),
            isTriggerHovered: new BehaviorSubject(false),
        };
        /** @type {?} */
        var menuInjector = new MenuInjector(t, this._injector, context);
        /** @type {?} */
        var componentPortal = new ComponentPortal(menuComponent, undefined, menuInjector);
        /** @type {?} */
        var overlayRef = this.overlay.create({
            positionStrategy: positionStrategy,
            panelClass: 'ngx-contextmenu',
            scrollStrategy: this.scrollStrategy.close(),
        });
        /** @type {?} */
        var component = overlayRef.attach(componentPortal);
        /** @type {?} */
        var res = tslib_1.__assign({ overlayRef: overlayRef, component: component }, t, { menuClose: menuClose, menuAction: menuAction });
        this.menus.push(res);
        return res;
    };
    /**
     * @return {?}
     */
    ContextMenuService.prototype.getCurrentLevel = /**
     * @return {?}
     */
    function () {
        return this.menus.length;
    };
    /**
     * @param {?=} context
     * @param {?=} idx
     * @return {?}
     */
    ContextMenuService.prototype.closeAll = /**
     * @param {?=} context
     * @param {?=} idx
     * @return {?}
     */
    function (context, idx) {
        if (idx === void 0) { idx = 0; }
        for (var index = idx; index < this.menus.length; index++) {
            /** @type {?} */
            var menu = this.menus[index];
            this.destroyMenu(menu, context);
        }
        this.menus.splice(idx, this.menus.length);
    };
    /**
     * @param {?} menu
     * @param {?=} context
     * @return {?}
     */
    ContextMenuService.prototype.destroyMenu = /**
     * @param {?} menu
     * @param {?=} context
     * @return {?}
     */
    function (menu, context) {
        menu.component.instance._state = 'exit';
        if (menu.component.instance.lazy) {
            menu.component.instance._animationDone
                .pipe(filter(function (event) { return event.toState === 'exit'; }), take(1))
                .subscribe(function () {
                menu.overlayRef.detach();
                menu.overlayRef.dispose();
            });
        }
        else {
            menu.overlayRef.detach();
            menu.overlayRef.dispose();
        }
        if (context) {
            menu.menuAction.next(context);
        }
        menu.menuClose.next();
    };
    /**
     * @param {?} menu
     * @param {?} menuIndex
     * @param {?=} context
     * @return {?}
     */
    ContextMenuService.prototype.close = /**
     * @param {?} menu
     * @param {?} menuIndex
     * @param {?=} context
     * @return {?}
     */
    function (menu, menuIndex, context) {
        this.destroyMenu(menu, context);
        this.menus.splice(menuIndex, 1);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ContextMenuService.prototype.checkOutsideClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this.menus), _c = _b.next(); !_c.done; _c = _b.next()) {
                var m = _c.value;
                /** @type {?} */
                var clickedInside = m.component.location.nativeElement.contains($event.target);
                if (clickedInside) {
                    $event.preventDefault();
                    $event.stopPropagation();
                    return;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.closeAll();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ContextMenuService.prototype.closeSubMenu = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var menuIndex = this.menus.findIndex(function (n) { return n.id === id; });
        if (menuIndex === -1 || menuIndex !== this.menus.length - 1) {
            return;
        }
        /** @type {?} */
        var menu = this.menus[menuIndex];
        if (menu.isMenuHovered.getValue() || menu.isTriggerHovered.getValue()) {
            return;
        }
        // close all menus up if possible
        for (var index = this.menus.length - 1; index >= 1; index--) {
            /** @type {?} */
            var m = this.menus[index];
            if (!m.isMenuHovered.getValue() && !m.isTriggerHovered.getValue()) {
                this.close(m, index);
            }
            else {
                return;
            }
        }
    };
    ContextMenuService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ContextMenuService.ctorParameters = function () { return [
        { type: Overlay },
        { type: ScrollStrategyOptions },
        { type: Injector }
    ]; };
    /** @nocollapse */ ContextMenuService.ngInjectableDef = i0.defineInjectable({ factory: function ContextMenuService_Factory() { return new ContextMenuService(i0.inject(i1.Overlay), i0.inject(i1.ScrollStrategyOptions), i0.inject(i0.INJECTOR)); }, token: ContextMenuService, providedIn: "root" });
    return ContextMenuService;
}());
export { ContextMenuService };
if (false) {
    /** @type {?} */
    ContextMenuService.prototype.menus;
    /** @type {?} */
    ContextMenuService.prototype.id;
    /** @type {?} */
    ContextMenuService.prototype.overlay;
    /** @type {?} */
    ContextMenuService.prototype.scrollStrategy;
    /** @type {?} */
    ContextMenuService.prototype._injector;
}

//# sourceMappingURL=data:application/json;base64,